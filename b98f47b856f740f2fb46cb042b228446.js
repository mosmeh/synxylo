class StmLowpassFilter{constructor(){this._state1=this._state2=0,this._g=this._r=this._h=0}setParams(s,t){this._g=Math.tan(Math.PI*s),this._r=1/t,this._h=1/(1+this._r*this._g+this._g*this._g)}process(s){const t=(s-this._r*this._state1-this._g*this._state1-this._state2)*this._h,i=this._g*t+this._state1;this._state1=this._g*t+i;const e=this._g*i+this._state2;return this._state2=this._g*i+e,e}}class ModeFilter{constructor(){this._xnm1=this._ynm1=this._ynm2=0,this._a0=this._a1=this._a2=this._d=0,this._limit=sampleRate*(1/Math.PI-.01)}setParams(s,t){const i=Math.min(s,this._limit),e=sampleRate/(2*i*Math.PI),h=e*e;this._d=.5*e,this._a0=1/(h+this._d/t),this._a1=this._a0*(1-2*h),this._a2=this._a0*(h-this._d/t)}process(s){const t=this._a0*this._xnm1-this._a1*this._ynm1-this._a2*this._ynm2;return this._xnm1=s,this._ynm2=this._ynm1,this._ynm1=t,t*this._d}}class Exciter{constructor(){this._filter=new StmLowpassFilter,this._amp=0}set stiffness(s){const t=32*Math.pow(10,2.7*s)/sampleRate;this._filter.setParams(t,.5)}strike(s){this._amp=s}process(){const s=this._filter.process(this._amp);return this._amp=0,s}}const MODAL_FREQ_RATIOS=[1,3.932,9.538,16.688,24.566,31.147];class Resonator{constructor(){this._filters=[],this._amplitudes=new Float32Array(MODAL_FREQ_RATIOS.length);for(let s=0;s<MODAL_FREQ_RATIOS.length;++s)this._filters.push(new ModeFilter),this._amplitudes[s]=1}setParams({baseFreq:s,decay:t,material:i,position:e}){let h=5*Math.pow(10,3.2*t);const r=i*(2-i)*.85+.15;for(let t=0;t<MODAL_FREQ_RATIOS.length;++t){let i=MODAL_FREQ_RATIOS[t]*s;for(;i>sampleRate/2;)i/=2;this._filters[t].setParams(i,h),h*=r;const _=Math.round(MODAL_FREQ_RATIOS[t]-1);this._amplitudes[t]=(1+Math.cos(2*Math.PI*e*_))/2}}process(s){let t=0;for(let i=0;i<MODAL_FREQ_RATIOS.length;++i)t+=this._amplitudes[i]*this._filters[i].process(s);return t}}class Voice{constructor(s){this.note=s,this._freq=440*Math.pow(2,(s-69)/12),this._exciter=new Exciter,this._resonator=new Resonator}setParams(s){this._exciter.stiffness=s.stiffness,this._resonator.setParams({...s,baseFreq:this._freq})}strike(s){this._exciter.strike(s/127)}process(){return this._resonator.process(this._exciter.process())}}class Processor extends AudioWorkletProcessor{constructor(){super(),this._voices=[],this.port.onmessage=s=>{const{data:t}=s;switch(t.type){case"params":for(this._params=t.params;this._voices.length>this._params.voices;)this._voices.shift();return void this._voices.forEach((s=>s.setParams(this._params)));case"noteOn":const s=this._voices.findIndex((s=>s.note===t.note));if(s>=0){const[i]=this._voices.splice(s,1);return i.strike(t.velocity),void this._voices.push(i)}const i=new Voice(t.note);for(i.setParams(this._params),i.strike(t.velocity),this._voices.push(i);this._voices.length>this._params.voices;)this._voices.shift();return}}}process(s,t){const i=t[0][0];for(let s=0;s<i.length;++s)i[s]=this._voices.reduce(((s,t)=>s+t.process()),0);return!0}}registerProcessor("main",Processor);